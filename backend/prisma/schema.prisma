// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  questions         Question[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  UserCategoryScore UserCategoryScore[]
}

model Question {
  id          Int      @id @default(autoincrement())
  text        String
  answer      String
  option_a    String
  option_b    String
  option_c    String
  option_d    String
  category    Category @relation(fields: [category_id], references: [id])
  category_id Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id                String              @id @default(uuid())
  firstName         String
  lastName          String
  institution       String?
  email             String              @unique
  password          String // Hashed password
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Leaderboard       Leaderboard?
  UserCategoryScore UserCategoryScore[]
}

model Leaderboard {
  id          String @id @default(uuid())
  userId      String @unique @db.Uuid
  totalPoints Int    @default(0) // Total score across all categories

  user   User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  scores UserCategoryScore[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCategoryScore {
  id         String @id @default(uuid())
  userId     String @db.Uuid
  categoryId Int

  points Int @default(0) // Points per category

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Leaderboard   Leaderboard? @relation(fields: [leaderboardId], references: [id])
  leaderboardId String?

  @@unique([userId, categoryId]) // Ensures one score entry per user per category
}
