// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id                 Int           @id @default(autoincrement())
  name               String        @unique
  questions          Question[]
  leaderboardEntries Leaderboard[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model Question {
  id          Int      @id @default(autoincrement())
  text        String
  answer      String
  option_a    String
  option_b    String
  option_c    String
  option_d    String
  category    Category @relation(fields: [category_id], references: [id])
  category_id Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id                 Int           @id @default(autoincrement())
  firstName          String
  lastName           String
  institution        String?
  email              String        @unique
  password           String // Hashed password
  leaderboardEntries Leaderboard[] // Updated relation name
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model Leaderboard {
  id          Int      @id @default(autoincrement())
  userId      Int
  category_id Int
  points      Int      @default(0) // Points per category
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, category_id]) // Ensures one score entry per user per category
}
